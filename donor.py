import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup

from config import BOT_TOKEN
import requests
from bs4 import BeautifulSoup

bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)


class CNYKb(ReplyKeyboardMarkup):
    def __init__(self, resize_keyboard=True, row_width=2):
        super().__init__(resize_keyboard, row_width)
        self.add(KeyboardButton("/CNY"))


@dp.message_handler(commands=['start'])
async def start_msg(message: types.Message):
    await message.answer("Hi, I am a bot that takes the ruble to Yuan", reply_markup=CNYKb())


@dp.message_handler(commands=['CNY'])
async def get_CNY(message: types.Message):
    # P.S Comments generated by ChatGPT

    response = requests.get('https://www.cbr.ru/currency_base/daily/')

    if response.status_code == 200:
        # If a successful response is received (status code 200), proceed with the following code

        soup = BeautifulSoup(response.content, 'html.parser')

        # Initialize a BeautifulSoup object to parse the HTML content of the page

        table = soup.find('table', {'class': 'data'})

        # Find the table containing currency rates using the class 'data'

        rows = table.find_all('tr')

        # Find all rows (tags 'tr') within the table
        for row in rows:
            cells = row.find_all('td')
            if len(cells) > 1 and cells[1].text == 'CNY':
                cny = cells[4].text
                await message.answer(f"The ruble course towards Yuan: {cny}\n"
                                     f"1 ruble = {cny} CNY (yuan)")
                break

    else:
        await message.answer("Error, it does not work to get the yuan course")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)